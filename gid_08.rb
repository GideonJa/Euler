# gid_08_1.rb
def adjacent_digits(adj, bignum)
big_str = bignum.to_s
current_max_pos = check_pos = 0
new_product = max_product = big_str[check_pos,adj].split("").map(&:to_i).inject {|memo, n| n*memo }

while (check_pos+adj <= big_str.length)
	left_num = big_str[check_pos,1].to_i
	right_num =big_str[check_pos+adj, 1].to_i
	
	if left_num > 0
		new_product = (new_product/left_num)*right_num
	elsif 
		test = big_str[check_pos+1,adj]
		new_product = test.split("").map(&:to_i).inject {|memo, n| n*memo }
	end
	
	if new_product > max_product
		max_product=new_product
		current_max_pos = check_pos + 1
	end
		check_pos +=1
end
return [big_str[current_max_pos,adj], max_product]
end

bignum = 731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749
3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586
178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
adj = 13
p adjacent_digits(adj, bignum)
